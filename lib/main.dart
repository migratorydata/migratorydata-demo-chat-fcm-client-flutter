import 'dart:io';

import 'package:device_info_plus/device_info_plus.dart';
import 'package:flutter/material.dart';

// core Flutter primitives
import 'package:flutter/foundation.dart';
// core FlutterFire dependency
import 'package:firebase_core/firebase_core.dart';
// generated by

// FlutterFire's Firebase Cloud Messaging plugin
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:migratorydata_client_dart_v6/client.dart';

import 'chat_app.dart';
import 'firebase_options.dart';

Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  await Firebase.initializeApp();

  if (kDebugMode) {
    print("Handling a background message: ${message.messageId}");
    print('Message data: ${message.data}');
    print('Message notification: ${message.notification?.title}');
    print('Message notification: ${message.notification?.body}');
  }
}

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  final messaging = FirebaseMessaging.instance;

  final settings = await messaging.requestPermission(
    alert: true,
    announcement: false,
    badge: true,
    carPlay: false,
    criticalAlert: false,
    provisional: false,
    sound: true,
  );

  if (kDebugMode) {
    print('Permission granted: ${settings.authorizationStatus}');
  }

// It requests a registration token for sending messages to users from your App server or other trusted server environment.
  String? token = await messaging.getToken();
  String? deviceId = await _getId();

  if (kDebugMode) {
    print('Registration Token=$token');
  }

  FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);

  runApp(MyApp(token, deviceId));
}


class MyApp extends StatefulWidget {

  final String? token;
  final String? deviceId;

  const MyApp(this.token, this.deviceId, {super.key});

  @override
  _MyApp createState() => _MyApp(token, deviceId);
}

class _MyApp extends State<MyApp> with WidgetsBindingObserver {

  final _writeMessagefieldText = TextEditingController();

  MigratoryDataClient migratoryDataClient = new MigratoryDataClient();
  String server = '192.168.1.223:8800';
  bool encryption = false;
  String token = 'some-token';

  String _username = "name-";
  String _writeMessage = "";

  List<String> _apiInfo = ["waiting for api info"];
  List<String> _messages = ["waiting for messages"];

  ChatApp? _chatApp;

  _MyApp(String? externalToken, String? deviceId) {
    if (deviceId != null) {
      _username += deviceId;
    }
    if (externalToken != null) {
      _chatApp = ChatApp(_messages, _apiInfo, externalToken, "demoRoom", this);
      _chatApp?.init();
    }
  }

  @override
  Widget build(BuildContext context) {
    const String appTitle = 'Chat app demo';
    return MaterialApp(
      title: appTitle,
      home: Scaffold(
          resizeToAvoidBottomInset: false,
          appBar: AppBar(
            title: const Text(appTitle),
          ),
          body: SingleChildScrollView(
              child: Column(
                children: [
                  Row(
                    children: [
                      Expanded(child:
                          TextFormField(
                            initialValue: "demoRoom",
                            decoration: const InputDecoration(
                              border: UnderlineInputBorder(),
                              labelText: 'Enter your room',
                            ),
                            autofocus: false,
                            obscureText: false,
                          ),
                      ),
                          ElevatedButton(
                            onPressed: () {
                              if (_chatApp?.getAppStatus() ==
                                  AppStatus.LOG_IN) {
                                logout();
                              } else {
                                login();
                              }
                            },
                            child: Text(
                                _chatApp?.getAppStatus() == AppStatus.LOG_IN
                                    ? "Logout"
                                    : "Login"),
                          )
                    ],
                  ),
                  Row(
                    mainAxisSize: MainAxisSize.max,
                    children: [
                      Expanded(
                            child: TextFormField(
                              initialValue: _username,
                              autofocus: false,
                              obscureText: false,
                              decoration: const InputDecoration(
                                border: UnderlineInputBorder(),
                                labelText: 'Enter your username',
                              ),
                            ),
                      ),
                          ElevatedButton(
                            onPressed: () {},
                            child: const Text("Close"),
                          )
                    ],
                  ),
                  Container(
                    margin: const EdgeInsets.all(5.0),
                    height: 50.0,
                      child: ListView(
                        children: [
                          for (final info in _apiInfo.reversed.toList())
                            new Text(
                              info,
                              style: TextStyle(
                                color: Colors.red,
                                fontSize: 10.0,
                                letterSpacing: 1,
                                wordSpacing: 1,
                              ),
                            )
                        ],
                        reverse: true,
                      ),
                    ),
                  Container(
                    margin: const EdgeInsets.all(5.0),
                    height: 100.0,
                      child: ListView(
                        children: [
                          for (final info in _messages.reversed.toList())
                            new Text(
                              info,
                              style: TextStyle(
                                color: Colors.red,
                                fontSize: 12.0,
                                letterSpacing: 1,
                                wordSpacing: 1,
                              ),
                            )
                        ],
                        reverse: true,
                      ),
                  ),
                    Row(
                      children: [
                        Expanded(
                            child: TextField(
                              controller: _writeMessagefieldText,
                              onChanged: (text) {
                                _writeMessage = text;
                              },
                              textInputAction: TextInputAction.go,
                              onSubmitted: (value) {
                                if (_writeMessagefieldText.text
                                    .trim()
                                    .isNotEmpty) {
                                  _chatApp?.chat(_username, _writeMessage);
                                  _writeMessagefieldText.clear();
                                }
                              },
                              autofocus: false,
                              obscureText: false,
                              decoration: InputDecoration(
                                labelText: 'Write message...',
                              ),
                            ),
                        ),
                            ElevatedButton(
                              onPressed: () {
                                if (_writeMessagefieldText.text
                                    .trim()
                                    .isNotEmpty) {
                                  _chatApp?.chat(_username, _writeMessage);
                                  _writeMessagefieldText.clear();
                                }
                              },
                              child: const Text("Send"),
                            )
                      ],
                    ),
                ],
              )
          )
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    print('AppLifecycleState: $state');

    if (state == AppLifecycleState.resumed) {
      _chatApp?.resume();
    } else if (state == AppLifecycleState.paused) {
      _chatApp?.pause();
    }

  }

  void logout() {
    if (_chatApp?.getAppStatus() == AppStatus.LOG_IN) {
      _chatApp?.logout();
    }
  }

  void login() {
    if (_chatApp?.getAppStatus() == AppStatus.LOG_OUT) {
      _chatApp?.login();
    }
  }

}

Future<String?> _getId() async {
  var deviceInfo = DeviceInfoPlugin();
  if (Platform.isIOS) { // import 'dart:io'
    var iosDeviceInfo = await deviceInfo.iosInfo;
    return iosDeviceInfo.identifierForVendor; // unique ID on iOS
  } else if (Platform.isAndroid) {
    var androidDeviceInfo = await deviceInfo.androidInfo;
    return androidDeviceInfo.id; // unique ID on Android
  }
}

